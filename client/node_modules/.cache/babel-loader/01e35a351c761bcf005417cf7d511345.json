{"ast":null,"code":"var _jsxFileName = \"/Users/briansmacmini2021/Desktop/bootcamp/codeprojects/weatherapp/client/src/App.js\";\nimport React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport SearchCities from './pages/SearchCities';\nimport SavedCities from './pages/SavedCities';\nimport Navbar from './components/Navbar'; // construct our main GraphQL API endpoint\n\nconst httpLink = createHttpLink({\n  uri: '/graphql'\n}); // construct request middleware that will attach the JWT token to every request as an 'authorization' header\n\nconst authLink = setContext((_, _ref) => {\n  let {\n    headers\n  } = _ref;\n  //get the authentication token from local storage if it exists\n  const token = localStorage.getItem('it_token'); //return the headers to the context so httpLink can read them\n\n  return {\n    headers: { ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  };\n});\nconst client = new ApolloClient({\n  //set up our client to execute the `authlink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    component: SearchCities,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/saved\",\n    component: SavedCities,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    render: () => /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"display-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 32\n      }\n    }, \"Wrong Page!\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  })))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/briansmacmini2021/Desktop/bootcamp/codeprojects/weatherapp/client/src/App.js"],"names":["React","BrowserRouter","Router","Switch","Route","ApolloClient","InMemoryCache","ApolloProvider","createHttpLink","setContext","SearchCities","SavedCities","Navbar","httpLink","uri","authLink","_","headers","token","localStorage","getItem","authorization","client","link","concat","cache","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,QAAuD,kBAAvD;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,cAJF,QAKO,gBALP;AAMA,SAASC,UAAT,QAA2B,6BAA3B;AAEA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,MAAP,MAAmB,qBAAnB,C,CAEA;;AACA,MAAMC,QAAQ,GAAGL,cAAc,CAAC;AAC9BM,EAAAA,GAAG,EAAE;AADyB,CAAD,CAA/B,C,CAIA;;AACA,MAAMC,QAAQ,GAAGN,UAAU,CAAC,CAACO,CAAD,WAAoB;AAAA,MAAhB;AAAEC,IAAAA;AAAF,GAAgB;AAC9C;AACA,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAd,CAF8C,CAG9C;;AACA,SAAO;AACLH,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPI,MAAAA,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFpC;AADJ,GAAP;AAMD,CAV0B,CAA3B;AAYA,MAAMI,MAAM,GAAG,IAAIjB,YAAJ,CAAiB;AAC9B;AACAkB,EAAAA,IAAI,EAAER,QAAQ,CAACS,MAAT,CAAgBX,QAAhB,CAFwB;AAG9BY,EAAAA,KAAK,EAAE,IAAInB,aAAJ;AAHuB,CAAjB,CAAf;;AAMA,SAASoB,GAAT,GAAe;AACb,sBACE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEJ,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,uDACA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAEA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,GAAlB;AAAsB,IAAA,SAAS,EAAEZ,YAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,QAAlB;AAA2B,IAAA,SAAS,EAAEC,WAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAE,mBAAM;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CAFA,CADF,CADF,CADF;AAcD;;AAED,eAAee,GAAf","sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport {\n  ApolloClient, \n  InMemoryCache, \n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport SearchCities from './pages/SearchCities';\nimport SavedCities from './pages/SavedCities';\nimport Navbar from './components/Navbar';\n\n// construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// construct request middleware that will attach the JWT token to every request as an 'authorization' header\nconst authLink = setContext((_, { headers }) => {\n  //get the authentication token from local storage if it exists\n  const token = localStorage.getItem('it_token');\n  //return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  //set up our client to execute the `authlink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={SearchCities} />\n          <Route exact path=\"/saved\" component={SavedCities} />\n          <Route render={() => <h1 className=\"display-2\">Wrong Page!</h1>} />\n        </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}