{"ast":null,"code":"var _jsxFileName = \"/Users/briansmacmini2021/Desktop/bootcamp/codeprojects/weatherapp/client/src/pages/SavedCities.js\";\nimport React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_ME } from '../utils/queries';\nimport { REMOVE_CITY } from '../utils/mutations';\nimport { removeCityID } from '../utils/localStorage';\nimport Auth from '../utils/auth';\n\nconst SavedCities = () => {\n  var _userData$savedCities, _userData$savedCities2;\n\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_ME);\n  const [removeCity, {\n    error\n  }] = useMutation(REMOVE_CITY);\n  const userData = (data === null || data === void 0 ? void 0 : data.me) || {}; // creates function that accepts city's mondoDB _id value as param and deletes the city from the database\n\n  const handleDeleteCity = async cityId => {\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const {\n        data\n      } = await removeCity({\n        variables: {\n          cityId\n        }\n      }); // upon success, removes a city id from local storage\n\n      removeCityId(cityId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 16\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Jumbotron, {\n    fluid: true,\n    className: \"text-light bg-dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }, \"Viewing \", userData.username, \"'s cities\"))), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, ((_userData$savedCities = userData.savedCities) === null || _userData$savedCities === void 0 ? void 0 : _userData$savedCities.length) ? `Viewing ${userData.savedCities.length} saved ${userData.savedCities.length === 1 ? 'city' : 'cities'}:` : 'You have no saved cities'), /*#__PURE__*/React.createElement(CardColumns, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, (_userData$savedCities2 = userData.savedCities) === null || _userData$savedCities2 === void 0 ? void 0 : _userData$savedCities2.map(city => {\n    return /*#__PURE__*/React.createElement(Card, {\n      key: city.cityId,\n      border: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }\n    }, city.image ? /*#__PURE__*/React.createElement(Card.Img, {\n      src: city.image,\n      alt: `Image of the ${city.name}`,\n      variant: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 33\n      }\n    }) : null, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 33\n      }\n    }, \" \", city.name), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 33\n      }\n    }, \" Cities: \", city.names), /*#__PURE__*/React.createElement(Card.Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 33\n      }\n    }, city.forecast), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-block btn-danger\",\n      onClick: () => handleDeleteCity(city.cityId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 33\n      }\n    }, \"Delete this city\")));\n  }))));\n};\n\nexport default SavedCities;","map":{"version":3,"sources":["/Users/briansmacmini2021/Desktop/bootcamp/codeprojects/weatherapp/client/src/pages/SavedCities.js"],"names":["React","Jumbotron","Container","CardColumns","Card","Button","useQuery","useMutation","QUERY_ME","REMOVE_CITY","removeCityID","Auth","SavedCities","loading","data","removeCity","error","userData","me","handleDeleteCity","cityId","token","loggedIn","getToken","variables","removeCityId","err","console","username","savedCities","length","map","city","image","name","names","forecast"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n    Jumbotron,\n    Container,\n    CardColumns,\n    Card,\n    Button,\n} from 'react-bootstrap';\n\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_ME } from '../utils/queries';\nimport { REMOVE_CITY } from '../utils/mutations';\nimport { removeCityID } from '../utils/localStorage';\n\nimport Auth from '../utils/auth';\n\nconst SavedCities = () => {\n    const {loading, data } = useQuery(QUERY_ME);\n    const [removeCity, { error }] = useMutation(REMOVE_CITY);\n\n    const userData = data?.me || {};\n\n    // creates function that accepts city's mondoDB _id value as param and deletes the city from the database\n    const handleDeleteCity = async (cityId) => {\n        // get token\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n        if (!token) {\n            return false;\n        }\n\n        try {\n            const { data } = await removeCity({\n                variables: { cityId },\n            });\n\n            // upon success, removes a city id from local storage\n            removeCityId(cityId);\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    if (loading) {\n        return <h2>Loading...</h2>;\n    }\n\n    return (\n        <>\n        <Jumbotron fluid className=\"text-light bg-dark\">\n            <Container>\n                <h1>Viewing {userData.username}'s cities</h1>\n            </Container>\n        </Jumbotron>\n        <Container>\n            <h2>\n                {userData.savedCities?.length\n                    ? `Viewing ${userData.savedCities.length} saved ${\n                    userData.savedCities.length === 1 ? 'city' : 'cities'\n                }:`\n                : 'You have no saved cities'}\n            </h2>\n            <CardColumns>\n                {userData.savedCities?.map((city) => {\n                    return (\n                        <Card key={city.cityId} border=\"dark\">\n                            {city.image ? (\n                                <Card.Img\n                                src={city.image}\n                                alt={`Image of the ${city.name}`}\n                                variant=\"top\"\n                                />\n                            ) : null}\n                            <Card.Body>\n                                <Card.Title> {city.name}</Card.Title>\n                                <p className=\"small\"> Cities: {city.names}</p>\n                                <Card.Text>{city.forecast}</Card.Text>\n                                <Button\n                                    className=\"btn-block btn-danger\"\n                                    onClick={() => handleDeleteCity(city.cityId)}\n                                    >\n                                        Delete this city\n                                    </Button>\n                            </Card.Body>\n                        </Card>\n                    );\n                })}\n            </CardColumns>\n        </Container>\n        </>\n    );\n};\n\nexport default SavedCities;"]},"metadata":{},"sourceType":"module"}