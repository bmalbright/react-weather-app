{"ast":null,"code":"var _jsxFileName = \"/Users/briansmacmini2021/Desktop/bootcamp/codeprojects/weatherapp/client/src/pages/SearchCities.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from \"react-bootstrap\";\nimport { useMutation } from \"@apollo/client\";\nimport { SAVE_CITY } from \"../utils/mutations\";\nimport { saveCityIds, getSavedCityIds } from \"../utils/localStorage\";\nimport Auth from \"../utils/auth\";\nconst apiKey = 'booger';\n\nconst SearchCities = () => {\n  // creates a state for holding returned weather API data\n  const [searchedCities, setSearchedCities] = useState([]); // creates a state for search field data\n\n  const [searchInput, setSearchInput] = useState(\"\"); // creates a state to hold saved cityId values\n\n  const [savedCityIds, setSavedCityIds] = useState(getSavedCityIds());\n  const [saveCity, {\n    error\n  }] = useMutation(SAVE_CITY); // set up useEffect hook to save 'savedCityIds' list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n\n  useEffect(() => {\n    return () => savedCityIds(savedCityIds);\n  }); // creates a method to search for cities and set state on form submit\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${searchInput}&appid=${apiKey}&units=imperial`);\n\n      if (!response.ok) {\n        throw new Error(\"something went terribly wrong!\");\n      }\n\n      const {\n        items\n      } = await response.json();\n      const cityData = items.map(city => ({\n        cityId: city.id,\n        currentDate: city.main.date,\n        tempTag: city.main.humidity,\n        humidityTag: city.main.humidity,\n        windSpeedTag: city.main.wind_speed\n      }));\n      setSearchedCities(cityData);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  }; // function to handle saving city to the database\n\n\n  const handleSavedCity = async cityId => {\n    // find the city in 'searchedBooks' state by matching id\n    const cityToSave = searchedCities.find(city => city.cityId === cityId); // get token\n\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const {\n        data\n      } = await saveCity({\n        variables: {\n          cityData: { ...cityToSave\n          }\n        }\n      });\n      console.log(savedCityIds);\n      setSavedCityIds([...savedCityIds, cityToSave.cityId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Jumbotron, {\n    fluid: true,\n    className: \"text-light bg-dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \" Search for your favorite cities\"), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    md: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    name: \"searchInput\",\n    value: searchInput,\n    onChange: e => setSearchInput(e.target.value),\n    type: \"text\",\n    size: \"lg\",\n    placeholder: \"Search for a city\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"success\",\n    size: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, \"Submit\")))))), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, searchedCities.length ? `Viewing ${searchedCities.length} results` : \"Search for a city to begin\"), /*#__PURE__*/React.createElement(CardColumns, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, searchedCities.map(city => {\n    return /*#__PURE__*/React.createElement(Card, {\n      key: city.cityId,\n      border: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 15\n      }\n    }, city.image ? /*#__PURE__*/React.createElement(Card.image, {\n      src: city.image,\n      alt: `view of ${city.name}`,\n      variant: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 19\n      }\n    }) : null, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 19\n      }\n    }, city.name), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 19\n      }\n    }, \" City\"), /*#__PURE__*/React.createElement(Card.Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 19\n      }\n    }, city.temp), Auth.loggedIn() && /*#__PURE__*/React.createElement(Button, {\n      disabled: savedCityIds === null || savedCityIds === void 0 ? void 0 : savedCityIds.some(savedId => savedId === city.cityId),\n      className: \"btn-block btn-info\",\n      onClick: () => handleSaveCity(city.cityId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }\n    }, (savedCityIds === null || savedCityIds === void 0 ? void 0 : savedCityIds.some(savedId => savedId === city.cityId)) ? 'City already saved' : 'Save this city')));\n  }))));\n};\n\nexport default SearchCities;","map":{"version":3,"sources":["/Users/briansmacmini2021/Desktop/bootcamp/codeprojects/weatherapp/client/src/pages/SearchCities.js"],"names":["React","useState","useEffect","Jumbotron","Container","Col","Form","Button","Card","CardColumns","useMutation","SAVE_CITY","saveCityIds","getSavedCityIds","Auth","apiKey","SearchCities","searchedCities","setSearchedCities","searchInput","setSearchInput","savedCityIds","setSavedCityIds","saveCity","error","handleFormSubmit","event","preventDefault","response","fetch","ok","Error","items","json","cityData","map","city","cityId","id","currentDate","main","date","tempTag","humidity","humidityTag","windSpeedTag","wind_speed","err","console","handleSavedCity","cityToSave","find","token","loggedIn","getToken","data","variables","log","e","target","value","length","image","name","temp","some","savedId","handleSaveCity"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  CardColumns,\n} from \"react-bootstrap\";\n\nimport { useMutation } from \"@apollo/client\";\nimport { SAVE_CITY } from \"../utils/mutations\";\nimport { saveCityIds, getSavedCityIds } from \"../utils/localStorage\";\n\nimport Auth from \"../utils/auth\";\n\nconst apiKey = 'booger'\n\nconst SearchCities = () => {\n  // creates a state for holding returned weather API data\n  const [searchedCities, setSearchedCities] = useState([]);\n  // creates a state for search field data\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  // creates a state to hold saved cityId values\n  const [savedCityIds, setSavedCityIds] = useState(getSavedCityIds());\n\n  const [saveCity, { error }] = useMutation(SAVE_CITY);\n\n  // set up useEffect hook to save 'savedCityIds' list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => savedCityIds(savedCityIds);\n  });\n\n  // creates a method to search for cities and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${searchInput}&appid=${apiKey}&units=imperial`\n      );\n\n      if (!response.ok) {\n        throw new Error(\"something went terribly wrong!\");\n      }\n\n      const { items } = await response.json();\n\n      const cityData = items.map((city) => ({\n        cityId: city.id,\n        currentDate: city.main.date,\n        tempTag: city.main.humidity,\n        humidityTag: city.main.humidity,\n        windSpeedTag: city.main.wind_speed,\n      }));\n\n      setSearchedCities(cityData);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // function to handle saving city to the database\n  const handleSavedCity = async (cityId) => {\n    // find the city in 'searchedBooks' state by matching id\n    const cityToSave = searchedCities.find((city) => city.cityId === cityId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await saveCity({\n        variables: { cityData: { ...cityToSave } },\n      });\n      console.log(savedCityIds);\n      setSavedCityIds([...savedCityIds, cityToSave.cityId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1> Search for your favorite cities</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Search for a city\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedCities.length\n            ? `Viewing ${searchedCities.length} results`\n            : \"Search for a city to begin\"}\n        </h2>\n        <CardColumns>\n          {searchedCities.map((city) => {\n            return (\n              <Card key={city.cityId} border=\"dark\">\n                {city.image ? (\n                  <Card.image\n                    src={city.image}\n                    alt={`view of ${city.name}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{city.name}</Card.Title>\n                  <p className=\"small\"> City</p>\n                  <Card.Text>{city.temp}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedCityIds?.some(\n                        (savedId) => savedId === city.cityId\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveCity(city.cityId)}\n                    >\n                        {savedCityIds?.some((savedId) => savedId === city.cityId)\n                            ? 'City already saved'\n                            : 'Save this city'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchCities;"]},"metadata":{},"sourceType":"module"}